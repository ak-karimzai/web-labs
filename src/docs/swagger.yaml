basePath: /api/v1
definitions:
  ddo.CompletionStatus:
    description: A pre-defined choices for goal status
    enum:
    - Progress
    - Completed
    - Skipped
    type: string
    x-enum-varnames:
    - Progress
    - Completed
    - Skipped
  ddo.CreateGoal:
    description: Create request requirments
    properties:
      description:
        type: string
      name:
        type: string
      start_date:
        type: string
      target_date:
        type: string
    required:
    - description
    - start_date
    - target_date
    type: object
  ddo.CreateTask:
    description: Task request requirments
    properties:
      description:
        type: string
      frequency:
        $ref: '#/definitions/ddo.Frequency'
      name:
        type: string
    required:
    - description
    - frequency
    type: object
  ddo.Frequency:
    description: A pre-defined choices for task frequency
    enum:
    - Daily
    - Weekly
    - Monthly
    type: string
    x-enum-varnames:
    - Daily
    - Weekly
    - Monthly
  ddo.Login:
    description: Login request credentials
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  ddo.LoginResponse:
    description: Login request response
    properties:
      token:
        type: string
      user_info:
        $ref: '#/definitions/ddo.UserInfo'
    type: object
  ddo.SignUp:
    description: SignUp request credentials
    properties:
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  ddo.UpdateGoal:
    description: Update goal request credentials
    properties:
      completion_status:
        $ref: '#/definitions/ddo.CompletionStatus'
      description:
        type: string
      name:
        type: string
      start_date:
        type: string
      target_date:
        type: string
    type: object
  ddo.UserInfo:
    description: User info
    properties:
      create_at:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      username:
        type: string
    type: object
  handler_errors.ErrorResponse:
    description: request error message
    properties:
      message:
        type: string
    type: object
  model.Goal:
    properties:
      completion_status:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      start_date:
        type: string
      target_date:
        type: string
      updated_at:
        type: string
    type: object
  model.Task:
    properties:
      created_at:
        type: string
      description:
        type: string
      frequency:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
host: localhost:3000
info:
  contact: {}
  description: API Server for Goal tracker app
  title: Goal tracker
  version: "0.1"
paths:
  /goals:
    get:
      consumes:
      - application/json
      description: Get a list of user goals
      parameters:
      - default: 1
        description: number of the page
        in: query
        minimum: 1
        name: page_id
        required: true
        type: integer
      - default: 5
        description: size of the page
        in: query
        minimum: 5
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Goal'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler_errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler_errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user goals
      tags:
      - Goal
    post:
      consumes:
      - application/json
      description: Create goal request
      parameters:
      - description: Create goal
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/ddo.CreateGoal'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Goal'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler_errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler_errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create goal by system user
      tags:
      - Goal
  /goals/:id:
    delete:
      consumes:
      - application/json
      description: delete user goal by id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler_errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler_errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handler_errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler_errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete user goal
      tags:
      - Goal
    get:
      consumes:
      - application/json
      description: Get user goal by id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Goal'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler_errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler_errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handler_errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler_errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user goal
      tags:
      - Goal
    patch:
      consumes:
      - application/json
      description: update user goal by id
      parameters:
      - description: Update goal
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/ddo.UpdateGoal'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: integer
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler_errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler_errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handler_errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler_errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update user goal
      tags:
      - Goal
  /goals/:id/tasks:
    get:
      consumes:
      - application/json
      description: Get a list of user goal tasks
      parameters:
      - description: Goal ID
        in: path
        name: id
        required: true
        type: integer
      - default: 1
        description: number of the page
        in: query
        minimum: 1
        name: page_id
        required: true
        type: integer
      - default: 5
        description: size of the page
        in: query
        minimum: 5
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Task'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler_errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler_errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handler_errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user goal tasks
      tags:
      - Task
    post:
      consumes:
      - application/json
      description: Create task request
      parameters:
      - description: Goal ID
        in: path
        name: id
        required: true
        type: integer
      - description: Create task request
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/ddo.CreateTask'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Task'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler_errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler_errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handler_errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create task for a goal by system user
      tags:
      - Task
  /tasks/:id:
    delete:
      consumes:
      - application/json
      description: delete user goal by id
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler_errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler_errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handler_errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler_errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete user goal task
      tags:
      - Task
    get:
      consumes:
      - application/json
      description: Get user goal task by id
      parameters:
      - description: Goal ID
        in: path
        name: id
        required: true
        type: integer
      - description: Task ID
        in: path
        name: task_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Task'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler_errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler_errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handler_errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler_errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user goal task by id
      tags:
      - Task
    put:
      consumes:
      - application/json
      description: update user goal task by id
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      - description: Create goal
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/ddo.UpdateGoal'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: integer
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler_errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler_errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handler_errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler_errors.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update user goal task
      tags:
      - Task
  /user/login:
    post:
      consumes:
      - application/json
      description: Api for access to user privilege levels
      parameters:
      - description: login
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/ddo.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ddo.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler_errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler_errors.ErrorResponse'
      summary: Sign in
      tags:
      - Auth
  /user/signup:
    post:
      consumes:
      - application/json
      description: Create an account in system
      parameters:
      - description: sign up
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/ddo.SignUp'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: integer
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler_errors.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/handler_errors.ErrorResponse'
      summary: Signup
      tags:
      - Auth
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
